{"version":3,"sources":["../../src/core/Core.js"],"names":["Utils","require","Translator","ee","cuid","throttle","prettyBytes","match","DefaultStore","Uppy","opts","defaultLocale","strings","youCanOnlyUploadX","youHaveToAtLeastSelectX","exceedsSize","youCanOnlyUploadFileTypes","uppyServerError","defaultOptions","id","autoProceed","debug","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","meta","onBeforeFileAdded","currentFile","files","Promise","resolve","onBeforeUpload","done","locale","store","thumbnailGeneration","translator","i18n","translate","bind","plugins","getState","getPlugin","setFileMeta","setFileState","log","info","hideInfo","addFile","removeFile","pauseResume","_calculateProgress","resetProgress","pauseAll","resumeAll","retryAll","cancelAll","retryUpload","upload","emitter","on","off","once","emit","preProcessors","uploaders","postProcessors","setState","currentUploads","capabilities","resumableUploads","totalProgress","isHidden","type","message","_storeUnsubscribe","subscribe","prevState","nextState","patch","updateAll","global","uppyLog","state","iteratePlugins","plugin","update","fileID","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","Object","keys","forEach","updatedFile","progress","addPreProcessor","fn","push","removePreProcessor","i","indexOf","splice","addPostProcessor","removePostProcessor","addUploader","removeUploader","setMeta","data","updatedMeta","newMeta","getFile","_checkMinNumberOfFiles","length","smart_count","_checkRestrictions","file","isCorrectFileType","filter","allowedFileTypesString","join","size","beforeFileAdded","then","catch","err","reject","Error","getFileType","fileType","fileName","name","split","fileExtension","getFileNameAndExtension","extension","isRemote","generateFileID","newFile","source","bytesTotal","remote","preview","isFileAllowed","scheduledAutoProceed","setTimeout","console","error","stack","removedFile","updatedUploads","removeUploads","uploadID","newFileIDs","fileIDs","uploadFileID","removeUpload","_calculateTotalProgress","isObjectURL","URL","revokeObjectURL","generatePreview","isPreviewSupported","previewPromise","createThumbnail","createObjectURL","setPreviewURL","warn","wasPaused","isPaused","inProgressUpdatedFiles","filesToRetry","_createUpload","_runUpload","reset","Math","floor","toFixed","inProgress","progressMax","progressAll","actions","details","Date","now","_throttledCalculateProgress","leading","trailing","uploadResp","uploadURL","preprocess","postprocess","window","addEventListener","updateOnlineStatus","online","navigator","onLine","wasOffline","getID","use","Plugin","msg","TypeError","pluginId","existsPluginAlready","install","foundPlugin","pluginName","method","pluginType","removePlugin","instance","list","uninstall","index","close","duration","isComplexMessage","clearTimeout","infoTimeoutID","undefined","newInfo","getTimeStamp","dir","run","restore","_removeUpload","step","uploadData","restoreStep","steps","lastStep","currentUpload","map","successful","failed","uploader","isMinNumberOfFilesReached","beforeUpload","waitingFileIDs","module","exports"],"mappings":";;;;;;;;;;AAAA,IAAMA,QAAQC,QAAQ,eAAR,CAAd;AACA,IAAMC,aAAaD,QAAQ,oBAAR,CAAnB;AACA,IAAME,KAAKF,QAAQ,mBAAR,CAAX;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;AACA,IAAMI,WAAWJ,QAAQ,iBAAR,CAAjB;AACA,IAAMK,cAAcL,QAAQ,gBAAR,CAApB;AACA,IAAMM,QAAQN,QAAQ,YAAR,CAAd;AACA,IAAMO,eAAeP,QAAQ,uBAAR,CAArB;AACA;;AAEA;;;;;;IAKMQ,I;AACJ,gBAAaC,IAAb,EAAmB;AAAA;;AAAA;;AACjB,QAAMC,gBAAgB;AACpBC,eAAS;AACPC,2BAAmB;AACjB,aAAG,yCADc;AAEjB,aAAG;AAFc,SADZ;AAKPC,iCAAyB;AACvB,aAAG,iDADoB;AAEvB,aAAG;AAFoB,SALlB;AASPC,qBAAa,2CATN;AAUPC,mCAA2B,sBAVpB;AAWPC,yBAAiB;AAXV;;AAeX;AAhBsB,KAAtB,CAiBA,IAAMC,iBAAiB;AACrBC,UAAI,MADiB;AAErBC,mBAAa,IAFQ;AAGrBC,aAAO,KAHc;AAIrBC,oBAAc;AACZC,qBAAa,KADD;AAEZC,0BAAkB,KAFN;AAGZC,0BAAkB,KAHN;AAIZC,0BAAkB;AAJN,OAJO;AAUrBC,YAAM,EAVe;AAWrBC,yBAAmB,2BAACC,WAAD,EAAcC,KAAd;AAAA,eAAwBC,QAAQC,OAAR,EAAxB;AAAA,OAXE;AAYrBC,sBAAgB,wBAACH,KAAD,EAAQI,IAAR;AAAA,eAAiBH,QAAQC,OAAR,EAAjB;AAAA,OAZK;AAarBG,cAAQxB,aAba;AAcrByB,aAAO,IAAI5B,YAAJ,EAdc;AAerB6B,2BAAqB;;AAGvB;AAlBuB,KAAvB,CAmBA,KAAK3B,IAAL,GAAY,SAAc,EAAd,EAAkBQ,cAAlB,EAAkCR,IAAlC,CAAZ;;AAEA,SAAKyB,MAAL,GAAc,SAAc,EAAd,EAAkBxB,aAAlB,EAAiC,KAAKD,IAAL,CAAUyB,MAA3C,CAAd;AACA,SAAKA,MAAL,CAAYvB,OAAZ,GAAsB,SAAc,EAAd,EAAkBD,cAAcC,OAAhC,EAAyC,KAAKF,IAAL,CAAUyB,MAAV,CAAiBvB,OAA1D,CAAtB;;AAEA;AACA,SAAK0B,UAAL,GAAkB,IAAIpC,UAAJ,CAAe,EAACiC,QAAQ,KAAKA,MAAd,EAAf,CAAlB;AACA,SAAKI,IAAL,GAAY,KAAKD,UAAL,CAAgBE,SAAhB,CAA0BC,IAA1B,CAA+B,KAAKH,UAApC,CAAZ;;AAEA;AACA,SAAKI,OAAL,GAAe,EAAf;;AAEA,SAAKJ,UAAL,GAAkB,IAAIpC,UAAJ,CAAe,EAACiC,QAAQ,KAAKzB,IAAL,CAAUyB,MAAnB,EAAf,CAAlB;AACA,SAAKI,IAAL,GAAY,KAAKD,UAAL,CAAgBE,SAAhB,CAA0BC,IAA1B,CAA+B,KAAKH,UAApC,CAAZ;AACA,SAAKK,QAAL,GAAgB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKG,SAAL,GAAiB,KAAKA,SAAL,CAAeH,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKI,WAAL,GAAmB,KAAKA,WAAL,CAAiBJ,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKK,YAAL,GAAoB,KAAKA,YAAL,CAAkBL,IAAlB,CAAuB,IAAvB,CAApB;AACA;AACA,SAAKM,GAAL,GAAW,KAAKA,GAAL,CAASN,IAAT,CAAc,IAAd,CAAX;AACA,SAAKO,IAAL,GAAY,KAAKA,IAAL,CAAUP,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKQ,QAAL,GAAgB,KAAKA,QAAL,CAAcR,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKS,OAAL,GAAe,KAAKA,OAAL,CAAaT,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKU,UAAL,GAAkB,KAAKA,UAAL,CAAgBV,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKW,WAAL,GAAmB,KAAKA,WAAL,CAAiBX,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKY,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBZ,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKa,aAAL,GAAqB,KAAKA,aAAL,CAAmBb,IAAnB,CAAwB,IAAxB,CAArB;;AAEA,SAAKc,QAAL,GAAgB,KAAKA,QAAL,CAAcd,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKe,SAAL,GAAiB,KAAKA,SAAL,CAAef,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKgB,QAAL,GAAgB,KAAKA,QAAL,CAAchB,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKiB,SAAL,GAAiB,KAAKA,SAAL,CAAejB,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKkB,WAAL,GAAmB,KAAKA,WAAL,CAAiBlB,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKmB,MAAL,GAAc,KAAKA,MAAL,CAAYnB,IAAZ,CAAiB,IAAjB,CAAd;;AAEA;AACA,SAAKoB,OAAL,GAAe1D,IAAf;AACA,SAAK2D,EAAL,GAAU,KAAKD,OAAL,CAAaC,EAAb,CAAgBrB,IAAhB,CAAqB,KAAKoB,OAA1B,CAAV;AACA,SAAKE,GAAL,GAAW,KAAKF,OAAL,CAAaE,GAAb,CAAiBtB,IAAjB,CAAsB,KAAKoB,OAA3B,CAAX;AACA,SAAKG,IAAL,GAAY,KAAKH,OAAL,CAAaG,IAAb,CAAkBvB,IAAlB,CAAuB,KAAKoB,OAA5B,CAAZ;AACA,SAAKI,IAAL,GAAY,KAAKJ,OAAL,CAAaI,IAAb,CAAkBxB,IAAlB,CAAuB,KAAKoB,OAA5B,CAAZ;;AAEA,SAAKK,aAAL,GAAqB,EAArB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,cAAL,GAAsB,EAAtB;;AAEA,SAAKhC,KAAL,GAAa,KAAK1B,IAAL,CAAU0B,KAAvB;AACA,SAAKiC,QAAL,CAAc;AACZ3B,eAAS,EADG;AAEZZ,aAAO,EAFK;AAGZwC,sBAAgB,EAHJ;AAIZC,oBAAc;AACZC,0BAAkB;AADN,OAJF;AAOZC,qBAAe,CAPH;AAQZ9C,YAAM,SAAc,EAAd,EAAkB,KAAKjB,IAAL,CAAUiB,IAA5B,CARM;AASZqB,YAAM;AACJ0B,kBAAU,IADN;AAEJC,cAAM,MAFF;AAGJC,iBAAS;AAHL;AATM,KAAd;;AAgBA,SAAKC,iBAAL,GAAyB,KAAKzC,KAAL,CAAW0C,SAAX,CAAqB,UAACC,SAAD,EAAYC,SAAZ,EAAuBC,KAAvB,EAAiC;AAC7E,YAAKhB,IAAL,CAAU,cAAV,EAA0Bc,SAA1B,EAAqCC,SAArC,EAAgDC,KAAhD;AACA,YAAKC,SAAL,CAAeF,SAAf;AACD,KAHwB,CAAzB;;AAKA;AACA;AACA,QAAI,KAAKtE,IAAL,CAAUW,KAAd,EAAqB;AACnB8D,aAAOC,OAAP,GAAiB,EAAjB;AACAD,aAAO,KAAKzE,IAAL,CAAUS,EAAjB,IAAuB,IAAvB;AACD;AACF;;AAED;;;;;;iBAIA+D,S,sBAAWG,K,EAAO;AAChB,SAAKC,cAAL,CAAoB,kBAAU;AAC5BC,aAAOC,MAAP,CAAcH,KAAd;AACD,KAFD;AAGD,G;;AAED;;;;;;;iBAKAhB,Q,qBAAUY,K,EAAO;AACf,SAAK7C,KAAL,CAAWiC,QAAX,CAAoBY,KAApB;AACD,G;;AAED;;;;;iBAGAtC,Q,uBAAY;AACV,WAAO,KAAKP,KAAL,CAAWO,QAAX,EAAP;AACD,G;;AAED;;;AAKA;;;iBAGAG,Y,yBAAc2C,M,EAAQJ,K,EAAO;AAAA;;AAC3B,SAAKhB,QAAL,CAAc;AACZvC,aAAO,SAAc,EAAd,EAAkB,KAAKa,QAAL,GAAgBb,KAAlC,6BACJ2D,MADI,IACK,SAAc,EAAd,EAAkB,KAAK9C,QAAL,GAAgBb,KAAhB,CAAsB2D,MAAtB,CAAlB,EAAiDJ,KAAjD,CADL;AADK,KAAd;AAKD,G;;iBAED/B,a,4BAAiB;AACf,QAAMoC,kBAAkB;AACtBC,kBAAY,CADU;AAEtBC,qBAAe,CAFO;AAGtBC,sBAAgB,KAHM;AAItBC,qBAAe;AAJO,KAAxB;AAMA,QAAMhE,QAAQ,SAAc,EAAd,EAAkB,KAAKa,QAAL,GAAgBb,KAAlC,CAAd;AACA,QAAMiE,eAAe,EAArB;AACAC,WAAOC,IAAP,CAAYnE,KAAZ,EAAmBoE,OAAnB,CAA2B,kBAAU;AACnC,UAAMC,cAAc,SAAc,EAAd,EAAkBrE,MAAM2D,MAAN,CAAlB,CAApB;AACAU,kBAAYC,QAAZ,GAAuB,SAAc,EAAd,EAAkBD,YAAYC,QAA9B,EAAwCV,eAAxC,CAAvB;AACAK,mBAAaN,MAAb,IAAuBU,WAAvB;AACD,KAJD;;AAMA,SAAK9B,QAAL,CAAc;AACZvC,aAAOiE,YADK;AAEZtB,qBAAe;AAFH,KAAd;;AAKA;AACA,SAAKR,IAAL,CAAU,gBAAV;AACD,G;;iBAEDoC,e,4BAAiBC,E,EAAI;AACnB,SAAKpC,aAAL,CAAmBqC,IAAnB,CAAwBD,EAAxB;AACD,G;;iBAEDE,kB,+BAAoBF,E,EAAI;AACtB,QAAMG,IAAI,KAAKvC,aAAL,CAAmBwC,OAAnB,CAA2BJ,EAA3B,CAAV;AACA,QAAIG,MAAM,CAAC,CAAX,EAAc;AACZ,WAAKvC,aAAL,CAAmByC,MAAnB,CAA0BF,CAA1B,EAA6B,CAA7B;AACD;AACF,G;;iBAEDG,gB,6BAAkBN,E,EAAI;AACpB,SAAKlC,cAAL,CAAoBmC,IAApB,CAAyBD,EAAzB;AACD,G;;iBAEDO,mB,gCAAqBP,E,EAAI;AACvB,QAAMG,IAAI,KAAKrC,cAAL,CAAoBsC,OAApB,CAA4BJ,EAA5B,CAAV;AACA,QAAIG,MAAM,CAAC,CAAX,EAAc;AACZ,WAAKrC,cAAL,CAAoBuC,MAApB,CAA2BF,CAA3B,EAA8B,CAA9B;AACD;AACF,G;;iBAEDK,W,wBAAaR,E,EAAI;AACf,SAAKnC,SAAL,CAAeoC,IAAf,CAAoBD,EAApB;AACD,G;;iBAEDS,c,2BAAgBT,E,EAAI;AAClB,QAAMG,IAAI,KAAKtC,SAAL,CAAeuC,OAAf,CAAuBJ,EAAvB,CAAV;AACA,QAAIG,MAAM,CAAC,CAAX,EAAc;AACZ,WAAKtC,SAAL,CAAewC,MAAf,CAAsBF,CAAtB,EAAyB,CAAzB;AACD;AACF,G;;iBAEDO,O,oBAASC,I,EAAM;AACb,QAAMC,cAAc,SAAc,EAAd,EAAkB,KAAKvE,QAAL,GAAgBhB,IAAlC,EAAwCsF,IAAxC,CAApB;AACA,QAAMlB,eAAe,SAAc,EAAd,EAAkB,KAAKpD,QAAL,GAAgBb,KAAlC,CAArB;;AAEAkE,WAAOC,IAAP,CAAYF,YAAZ,EAA0BG,OAA1B,CAAkC,UAACT,MAAD,EAAY;AAC5CM,mBAAaN,MAAb,IAAuB,SAAc,EAAd,EAAkBM,aAAaN,MAAb,CAAlB,EAAwC;AAC7D9D,cAAM,SAAc,EAAd,EAAkBoE,aAAaN,MAAb,EAAqB9D,IAAvC,EAA6CsF,IAA7C;AADuD,OAAxC,CAAvB;AAGD,KAJD;;AAMA,SAAKlE,GAAL,CAAS,kBAAT;AACA,SAAKA,GAAL,CAASkE,IAAT;;AAEA,SAAK5C,QAAL,CAAc;AACZ1C,YAAMuF,WADM;AAEZpF,aAAOiE;AAFK,KAAd;AAID,G;;iBAEDlD,W,wBAAa4C,M,EAAQwB,I,EAAM;AACzB,QAAMlB,eAAe,SAAc,EAAd,EAAkB,KAAKpD,QAAL,GAAgBb,KAAlC,CAArB;AACA,QAAI,CAACiE,aAAaN,MAAb,CAAL,EAA2B;AACzB,WAAK1C,GAAL,CAAS,oEAAT,EAA+E0C,MAA/E;AACA;AACD;AACD,QAAM0B,UAAU,SAAc,EAAd,EAAkBpB,aAAaN,MAAb,EAAqB9D,IAAvC,EAA6CsF,IAA7C,CAAhB;AACAlB,iBAAaN,MAAb,IAAuB,SAAc,EAAd,EAAkBM,aAAaN,MAAb,CAAlB,EAAwC;AAC7D9D,YAAMwF;AADuD,KAAxC,CAAvB;AAGA,SAAK9C,QAAL,CAAc,EAACvC,OAAOiE,YAAR,EAAd;AACD,G;;AAED;;;;;;;iBAKAqB,O,oBAAS3B,M,EAAQ;AACf,WAAO,KAAK9C,QAAL,GAAgBb,KAAhB,CAAsB2D,MAAtB,CAAP;AACD,G;;AAED;;;;;;;;iBAMA4B,sB,qCAA0B;AAAA,QACjB5F,gBADiB,GACG,KAAKf,IAAL,CAAUY,YADb,CACjBG,gBADiB;;AAExB,QAAIuE,OAAOC,IAAP,CAAY,KAAKtD,QAAL,GAAgBb,KAA5B,EAAmCwF,MAAnC,GAA4C7F,gBAAhD,EAAkE;AAChE,WAAKuB,IAAL,MAAa,KAAKT,IAAL,CAAU,yBAAV,EAAqC,EAACgF,aAAa9F,gBAAd,EAArC,CAAb,EAAsF,OAAtF,EAA+F,IAA/F;AACA,aAAO,KAAP;AACD;AACD,WAAO,IAAP;AACD,G;;AAED;;;;;;;;;;iBAQA+F,kB,+BAAoBC,I,EAAM;AAAA,6BACkC,KAAK/G,IAAL,CAAUY,YAD5C;AAAA,QACjBC,WADiB,sBACjBA,WADiB;AAAA,QACJC,gBADI,sBACJA,gBADI;AAAA,QACcE,gBADd,sBACcA,gBADd;;;AAGxB,QAAIF,gBAAJ,EAAsB;AACpB,UAAIwE,OAAOC,IAAP,CAAY,KAAKtD,QAAL,GAAgBb,KAA5B,EAAmCwF,MAAnC,GAA4C,CAA5C,GAAgD9F,gBAApD,EAAsE;AACpE,aAAKwB,IAAL,MAAa,KAAKT,IAAL,CAAU,mBAAV,EAA+B,EAACgF,aAAa/F,gBAAd,EAA/B,CAAb,EAAgF,OAAhF,EAAyF,IAAzF;AACA,eAAO,KAAP;AACD;AACF;;AAED,QAAIE,gBAAJ,EAAsB;AACpB,UAAMgG,oBAAoBhG,iBAAiBiG,MAAjB,CAAwB,UAAChD,IAAD,EAAU;AAC1D,YAAI,CAAC8C,KAAK9C,IAAV,EAAgB,OAAO,KAAP;AAChB,eAAOpE,MAAMkH,KAAK9C,IAAX,EAAiBA,IAAjB,CAAP;AACD,OAHyB,EAGvB2C,MAHuB,GAGd,CAHZ;;AAKA,UAAI,CAACI,iBAAL,EAAwB;AACtB,YAAME,yBAAyBlG,iBAAiBmG,IAAjB,CAAsB,IAAtB,CAA/B;AACA,aAAK7E,IAAL,CAAa,KAAKT,IAAL,CAAU,2BAAV,CAAb,SAAuDqF,sBAAvD,EAAiF,OAAjF,EAA0F,IAA1F;AACA,eAAO,KAAP;AACD;AACF;;AAED,QAAIrG,WAAJ,EAAiB;AACf,UAAIkG,KAAKR,IAAL,CAAUa,IAAV,GAAiBvG,WAArB,EAAkC;AAChC,aAAKyB,IAAL,CAAa,KAAKT,IAAL,CAAU,aAAV,CAAb,SAAyCjC,YAAYiB,WAAZ,CAAzC,EAAqE,OAArE,EAA8E,IAA9E;AACA,eAAO,KAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD,G;;AAED;;;;;;;;;iBAOA2B,O,oBAASuE,I,EAAM;AAAA;;AACb;AACA;AACA,QAAMM,kBAAkBhG,QAAQC,OAAR,GACrBgG,IADqB,CAChB;AAAA,aAAM,OAAKtH,IAAL,CAAUkB,iBAAV,CAA4B6F,IAA5B,EAAkC,OAAK9E,QAAL,GAAgBb,KAAlD,CAAN;AAAA,KADgB,CAAxB;;AAGA,WAAOiG,gBAAgBE,KAAhB,CAAsB,UAACC,GAAD,EAAS;AACpC,UAAMtD,UAAU,QAAOsD,GAAP,yCAAOA,GAAP,OAAe,QAAf,GAA0BA,IAAItD,OAA9B,GAAwCsD,GAAxD;AACA,aAAKlF,IAAL,CAAU4B,OAAV,EAAmB,OAAnB,EAA4B,IAA5B;AACA,aAAO7C,QAAQoG,MAAR,CAAe,IAAIC,KAAJ,yBAAgCxD,OAAhC,CAAf,CAAP;AACD,KAJM,EAIJoD,IAJI,CAIC,YAAM;AACZ,aAAOhI,MAAMqI,WAAN,CAAkBZ,IAAlB,EAAwBO,IAAxB,CAA6B,UAACM,QAAD,EAAc;AAChD,YAAMvC,eAAe,SAAc,EAAd,EAAkB,OAAKpD,QAAL,GAAgBb,KAAlC,CAArB;AACA,YAAIyG,iBAAJ;AACA,YAAId,KAAKe,IAAT,EAAe;AACbD,qBAAWd,KAAKe,IAAhB;AACD,SAFD,MAEO,IAAIF,SAASG,KAAT,CAAe,GAAf,EAAoB,CAApB,MAA2B,OAA/B,EAAwC;AAC7CF,qBAAWD,SAASG,KAAT,CAAe,GAAf,EAAoB,CAApB,IAAyB,GAAzB,GAA+BH,SAASG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAA1C;AACD,SAFM,MAEA;AACLF,qBAAW,QAAX;AACD;AACD,YAAMG,gBAAgB1I,MAAM2I,uBAAN,CAA8BJ,QAA9B,EAAwCK,SAA9D;AACA,YAAMC,WAAWpB,KAAKoB,QAAL,IAAiB,KAAlC;;AAEA,YAAMpD,SAASzF,MAAM8I,cAAN,CAAqBrB,IAArB,CAAf;;AAEA,YAAMsB,UAAU;AACdC,kBAAQvB,KAAKuB,MAAL,IAAe,EADT;AAEd7H,cAAIsE,MAFU;AAGd+C,gBAAMD,QAHQ;AAIdK,qBAAWF,iBAAiB,EAJd;AAKd/G,gBAAM,SAAc,EAAd,EAAkB,OAAKgB,QAAL,GAAgBhB,IAAlC,EAAwC;AAC5C6G,kBAAMD,QADsC;AAE5C5D,kBAAM2D;AAFsC,WAAxC,CALQ;AASd3D,gBAAM2D,QATQ;AAUdrB,gBAAMQ,KAAKR,IAVG;AAWdb,oBAAU;AACRT,wBAAY,CADJ;AAERC,2BAAe,CAFP;AAGRqD,wBAAYxB,KAAKR,IAAL,CAAUa,IAAV,IAAkB,CAHtB;AAIRjC,4BAAgB,KAJR;AAKRC,2BAAe;AALP,WAXI;AAkBdgC,gBAAML,KAAKR,IAAL,CAAUa,IAAV,IAAkB,KAlBV;AAmBde,oBAAUA,QAnBI;AAoBdK,kBAAQzB,KAAKyB,MAAL,IAAe,EApBT;AAqBdC,mBAAS1B,KAAK0B;AArBA,SAAhB;;AAwBA,YAAMC,gBAAgB,OAAK5B,kBAAL,CAAwBuB,OAAxB,CAAtB;AACA,YAAI,CAACK,aAAL,EAAoB,OAAOrH,QAAQoG,MAAR,CAAe,IAAIC,KAAJ,CAAU,kBAAV,CAAf,CAAP;;AAEpBrC,qBAAaN,MAAb,IAAuBsD,OAAvB;AACA,eAAK1E,QAAL,CAAc,EAACvC,OAAOiE,YAAR,EAAd;;AAEA,eAAK9B,IAAL,CAAU,YAAV,EAAwB8E,OAAxB;AACA,eAAKhG,GAAL,kBAAwBwF,QAAxB,UAAqC9C,MAArC,qBAA2D6C,QAA3D;;AAEA,YAAI,OAAK5H,IAAL,CAAUU,WAAV,IAAyB,CAAC,OAAKiI,oBAAnC,EAAyD;AACvD,iBAAKA,oBAAL,GAA4BC,WAAW,YAAM;AAC3C,mBAAKD,oBAAL,GAA4B,IAA5B;AACA,mBAAKzF,MAAL,GAAcqE,KAAd,CAAoB,UAACC,GAAD,EAAS;AAC3BqB,sBAAQC,KAAR,CAActB,IAAIuB,KAAJ,IAAavB,IAAItD,OAAjB,IAA4BsD,GAA1C;AACD,aAFD;AAGD,WAL2B,EAKzB,CALyB,CAA5B;AAMD;AACF,OAxDM,CAAP;AAyDD,KA9DM,CAAP;AA+DD,G;;iBAED/E,U,uBAAYsC,M,EAAQ;AAAA;;AAAA,iBACgB,KAAKJ,KADrB;AAAA,QACVvD,KADU,UACVA,KADU;AAAA,QACHwC,cADG,UACHA,cADG;;AAElB,QAAMyB,eAAe,SAAc,EAAd,EAAkBjE,KAAlB,CAArB;AACA,QAAM4H,cAAc3D,aAAaN,MAAb,CAApB;AACA,WAAOM,aAAaN,MAAb,CAAP;;AAEA;AACA,QAAMkE,iBAAiB,SAAc,EAAd,EAAkBrF,cAAlB,CAAvB;AACA,QAAMsF,gBAAgB,EAAtB;AACA5D,WAAOC,IAAP,CAAY0D,cAAZ,EAA4BzD,OAA5B,CAAoC,UAAC2D,QAAD,EAAc;AAChD,UAAMC,aAAaxF,eAAeuF,QAAf,EAAyBE,OAAzB,CAAiCpC,MAAjC,CAAwC,UAACqC,YAAD;AAAA,eAAkBA,iBAAiBvE,MAAnC;AAAA,OAAxC,CAAnB;AACA;AACA,UAAIqE,WAAWxC,MAAX,KAAsB,CAA1B,EAA6B;AAC3BsC,sBAAcrD,IAAd,CAAmBsD,QAAnB;AACA;AACD;;AAEDF,qBAAeE,QAAf,IAA2B,SAAc,EAAd,EAAkBvF,eAAeuF,QAAf,CAAlB,EAA4C;AACrEE,iBAASD;AAD4D,OAA5C,CAA3B;AAGD,KAXD;;AAaA,SAAKzF,QAAL,CAAc;AACZC,sBAAgBqF,cADJ;AAEZ7H,aAAOiE;AAFK,KAAd;;AAKA6D,kBAAc1D,OAAd,CAAsB,UAAC2D,QAAD,EAAc;AAClC,aAAKI,YAAL,CAAkBJ,QAAlB;AACD,KAFD;;AAIA,SAAKK,uBAAL;AACA,SAAKjG,IAAL,CAAU,cAAV,EAA0BwB,MAA1B;;AAEA;AACA,QAAIiE,YAAYP,OAAZ,IAAuBnJ,MAAMmK,WAAN,CAAkBT,YAAYP,OAA9B,CAA3B,EAAmE;AACjEiB,UAAIC,eAAJ,CAAoBX,YAAYP,OAAhC;AACD;;AAED,SAAKpG,GAAL,oBAA0B0C,MAA1B;AACD,G;;AAED;;;;;iBAGA6E,e,4BAAiB7C,I,EAAM;AAAA;;AACrB,QAAIzH,MAAMuK,kBAAN,CAAyB9C,KAAK9C,IAA9B,KAAuC,CAAC8C,KAAKoB,QAAjD,EAA2D;AACzD,UAAI2B,uBAAJ;AACA,UAAI,KAAK9J,IAAL,CAAU2B,mBAAV,KAAkC,IAAtC,EAA4C;AAC1CmI,yBAAiBxK,MAAMyK,eAAN,CAAsBhD,IAAtB,EAA4B,GAA5B,CAAjB;AACD,OAFD,MAEO;AACL+C,yBAAiBzI,QAAQC,OAAR,CAAgBoI,IAAIM,eAAJ,CAAoBjD,KAAKR,IAAzB,CAAhB,CAAjB;AACD;AACDuD,qBAAexC,IAAf,CAAoB,UAACmB,OAAD,EAAa;AAC/B,eAAKwB,aAAL,CAAmBlD,KAAKtG,EAAxB,EAA4BgI,OAA5B;AACD,OAFD,EAEGlB,KAFH,CAES,UAACC,GAAD,EAAS;AAChBqB,gBAAQqB,IAAR,CAAa1C,IAAIuB,KAAJ,IAAavB,IAAItD,OAA9B;AACD,OAJD;AAKD;AACF,G;;AAED;;;;;iBAGA+F,a,0BAAelF,M,EAAQ0D,O,EAAS;AAC9B,SAAKrG,YAAL,CAAkB2C,MAAlB,EAA0B,EAAE0D,SAASA,OAAX,EAA1B;AACD,G;;iBAED/F,W,wBAAaqC,M,EAAQ;AACnB,QAAMM,eAAe,SAAc,EAAd,EAAkB,KAAKpD,QAAL,GAAgBb,KAAlC,CAArB;;AAEA,QAAIiE,aAAaN,MAAb,EAAqBI,cAAzB,EAAyC;;AAEzC,QAAMgF,YAAY9E,aAAaN,MAAb,EAAqBqF,QAArB,IAAiC,KAAnD;AACA,QAAMA,WAAW,CAACD,SAAlB;;AAEA,QAAM1E,cAAc,SAAc,EAAd,EAAkBJ,aAAaN,MAAb,CAAlB,EAAwC;AAC1DqF,gBAAUA;AADgD,KAAxC,CAApB;;AAIA/E,iBAAaN,MAAb,IAAuBU,WAAvB;AACA,SAAK9B,QAAL,CAAc,EAACvC,OAAOiE,YAAR,EAAd;;AAEA,SAAK9B,IAAL,CAAU,cAAV,EAA0BwB,MAA1B,EAAkCqF,QAAlC;;AAEA,WAAOA,QAAP;AACD,G;;iBAEDvH,Q,uBAAY;AACV,QAAMwC,eAAe,SAAc,EAAd,EAAkB,KAAKpD,QAAL,GAAgBb,KAAlC,CAArB;AACA,QAAMiJ,yBAAyB/E,OAAOC,IAAP,CAAYF,YAAZ,EAA0B4B,MAA1B,CAAiC,UAACF,IAAD,EAAU;AACxE,aAAO,CAAC1B,aAAa0B,IAAb,EAAmBrB,QAAnB,CAA4BP,cAA7B,IACAE,aAAa0B,IAAb,EAAmBrB,QAAnB,CAA4BN,aADnC;AAED,KAH8B,CAA/B;;AAKAiF,2BAAuB7E,OAAvB,CAA+B,UAACuB,IAAD,EAAU;AACvC,UAAMtB,cAAc,SAAc,EAAd,EAAkBJ,aAAa0B,IAAb,CAAlB,EAAsC;AACxDqD,kBAAU;AAD8C,OAAtC,CAApB;AAGA/E,mBAAa0B,IAAb,IAAqBtB,WAArB;AACD,KALD;AAMA,SAAK9B,QAAL,CAAc,EAACvC,OAAOiE,YAAR,EAAd;;AAEA,SAAK9B,IAAL,CAAU,WAAV;AACD,G;;iBAEDT,S,wBAAa;AACX,QAAMuC,eAAe,SAAc,EAAd,EAAkB,KAAKpD,QAAL,GAAgBb,KAAlC,CAArB;AACA,QAAMiJ,yBAAyB/E,OAAOC,IAAP,CAAYF,YAAZ,EAA0B4B,MAA1B,CAAiC,UAACF,IAAD,EAAU;AACxE,aAAO,CAAC1B,aAAa0B,IAAb,EAAmBrB,QAAnB,CAA4BP,cAA7B,IACAE,aAAa0B,IAAb,EAAmBrB,QAAnB,CAA4BN,aADnC;AAED,KAH8B,CAA/B;;AAKAiF,2BAAuB7E,OAAvB,CAA+B,UAACuB,IAAD,EAAU;AACvC,UAAMtB,cAAc,SAAc,EAAd,EAAkBJ,aAAa0B,IAAb,CAAlB,EAAsC;AACxDqD,kBAAU,KAD8C;AAExDtB,eAAO;AAFiD,OAAtC,CAApB;AAIAzD,mBAAa0B,IAAb,IAAqBtB,WAArB;AACD,KAND;AAOA,SAAK9B,QAAL,CAAc,EAACvC,OAAOiE,YAAR,EAAd;;AAEA,SAAK9B,IAAL,CAAU,YAAV;AACD,G;;iBAEDR,Q,uBAAY;AACV,QAAMsC,eAAe,SAAc,EAAd,EAAkB,KAAKpD,QAAL,GAAgBb,KAAlC,CAArB;AACA,QAAMkJ,eAAehF,OAAOC,IAAP,CAAYF,YAAZ,EAA0B4B,MAA1B,CAAiC,gBAAQ;AAC5D,aAAO5B,aAAa0B,IAAb,EAAmB+B,KAA1B;AACD,KAFoB,CAArB;;AAIAwB,iBAAa9E,OAAb,CAAqB,UAACuB,IAAD,EAAU;AAC7B,UAAMtB,cAAc,SAAc,EAAd,EAAkBJ,aAAa0B,IAAb,CAAlB,EAAsC;AACxDqD,kBAAU,KAD8C;AAExDtB,eAAO;AAFiD,OAAtC,CAApB;AAIAzD,mBAAa0B,IAAb,IAAqBtB,WAArB;AACD,KAND;AAOA,SAAK9B,QAAL,CAAc;AACZvC,aAAOiE,YADK;AAEZyD,aAAO;AAFK,KAAd;;AAKA,SAAKvF,IAAL,CAAU,WAAV,EAAuB+G,YAAvB;;AAEA,QAAMnB,WAAW,KAAKoB,aAAL,CAAmBD,YAAnB,CAAjB;AACA,WAAO,KAAKE,UAAL,CAAgBrB,QAAhB,CAAP;AACD,G;;iBAEDnG,S,wBAAa;AACX,SAAKO,IAAL,CAAU,YAAV;AACA,SAAKI,QAAL,CAAc,EAAEvC,OAAO,EAAT,EAAa2C,eAAe,CAA5B,EAAd;AACD,G;;iBAEDd,W,wBAAa8B,M,EAAQ;AACnB,QAAMM,eAAe,SAAc,EAAd,EAAkB,KAAKpD,QAAL,GAAgBb,KAAlC,CAArB;AACA,QAAMqE,cAAc,SAAc,EAAd,EAAkBJ,aAAaN,MAAb,CAAlB,EAClB,EAAE+D,OAAO,IAAT,EAAesB,UAAU,KAAzB,EADkB,CAApB;AAGA/E,iBAAaN,MAAb,IAAuBU,WAAvB;AACA,SAAK9B,QAAL,CAAc;AACZvC,aAAOiE;AADK,KAAd;;AAIA,SAAK9B,IAAL,CAAU,cAAV,EAA0BwB,MAA1B;;AAEA,QAAMoE,WAAW,KAAKoB,aAAL,CAAmB,CAAExF,MAAF,CAAnB,CAAjB;AACA,WAAO,KAAKyF,UAAL,CAAgBrB,QAAhB,CAAP;AACD,G;;iBAEDsB,K,oBAAS;AACP,SAAKzH,SAAL;AACD,G;;iBAEDL,kB,+BAAoB4D,I,EAAM;AACxB,QAAMxB,SAASwB,KAAK9F,EAApB;;AAEA;AACA,QAAI,CAAC,KAAKwB,QAAL,GAAgBb,KAAhB,CAAsB2D,MAAtB,CAAL,EAAoC;AAClC,WAAK1C,GAAL,CAAS,yDAAT,EAAoE0C,MAApE;AACA;AACD;;AAED,SAAK3C,YAAL,CAAkB2C,MAAlB,EAA0B;AACxBW,gBAAU,SAAc,EAAd,EAAkB,KAAKzD,QAAL,GAAgBb,KAAhB,CAAsB2D,MAAtB,EAA8BW,QAAhD,EAA0D;AAClER,uBAAeqB,KAAKrB,aAD8C;AAElEqD,oBAAYhC,KAAKgC,UAFiD;AAGlEtD,oBAAYyF,KAAKC,KAAL,CAAW,CAACpE,KAAKrB,aAAL,GAAqBqB,KAAKgC,UAA1B,GAAuC,GAAxC,EAA6CqC,OAA7C,CAAqD,CAArD,CAAX;AAHsD,OAA1D;AADc,KAA1B;;AAQA,SAAKpB,uBAAL;AACD,G;;iBAEDA,uB,sCAA2B;AACzB;AACA;AACA,QAAMpI,QAAQ,SAAc,EAAd,EAAkB,KAAKa,QAAL,GAAgBb,KAAlC,CAAd;;AAEA,QAAMyJ,aAAavF,OAAOC,IAAP,CAAYnE,KAAZ,EAAmB6F,MAAnB,CAA0B,UAACF,IAAD,EAAU;AACrD,aAAO3F,MAAM2F,IAAN,EAAYrB,QAAZ,CAAqBN,aAA5B;AACD,KAFkB,CAAnB;AAGA,QAAM0F,cAAcD,WAAWjE,MAAX,GAAoB,GAAxC;AACA,QAAImE,cAAc,CAAlB;AACAF,eAAWrF,OAAX,CAAmB,UAACuB,IAAD,EAAU;AAC3BgE,oBAAcA,cAAc3J,MAAM2F,IAAN,EAAYrB,QAAZ,CAAqBT,UAAjD;AACD,KAFD;;AAIA,QAAMlB,gBAAgB+G,gBAAgB,CAAhB,GAAoB,CAApB,GAAwBJ,KAAKC,KAAL,CAAW,CAACI,cAAc,GAAd,GAAoBD,WAArB,EAAkCF,OAAlC,CAA0C,CAA1C,CAAX,CAA9C;;AAEA,SAAKjH,QAAL,CAAc;AACZI,qBAAeA;AADH,KAAd;AAGD,G;;AAED;;;;;;;iBAKAiH,O,sBAAW;AAAA;;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAK5H,EAAL,CAAQ,OAAR,EAAiB,UAAC0F,KAAD,EAAW;AAC1B,aAAKnF,QAAL,CAAc,EAAEmF,OAAOA,MAAM5E,OAAf,EAAd;AACD,KAFD;;AAIA,SAAKd,EAAL,CAAQ,cAAR,EAAwB,UAAC2B,MAAD,EAAS+D,KAAT,EAAmB;AACzC,aAAK1G,YAAL,CAAkB2C,MAAlB,EAA0B,EAAE+D,OAAOA,MAAM5E,OAAf,EAA1B;AACA,aAAKP,QAAL,CAAc,EAAEmF,OAAOA,MAAM5E,OAAf,EAAd;;AAEA,UAAM2D,WAAW,OAAK5F,QAAL,GAAgBb,KAAhB,CAAsB2D,MAAtB,EAA8B+C,IAA/C;AACA,UAAI5D,gCAA8B2D,QAAlC;AACA,UAAI,QAAOiB,KAAP,yCAAOA,KAAP,OAAiB,QAAjB,IAA6BA,MAAM5E,OAAvC,EAAgD;AAC9CA,kBAAU,EAAEA,SAASA,OAAX,EAAoB+G,SAASnC,MAAM5E,OAAnC,EAAV;AACD;AACD,aAAK5B,IAAL,CAAU4B,OAAV,EAAmB,OAAnB,EAA4B,IAA5B;AACD,KAVD;;AAYA,SAAKd,EAAL,CAAQ,QAAR,EAAkB,YAAM;AACtB,aAAKO,QAAL,CAAc,EAAEmF,OAAO,IAAT,EAAd;AACD,KAFD;;AAIA;AACA;AACA;;AAEA,SAAK1F,EAAL,CAAQ,YAAR,EAAsB,UAAC2D,IAAD,EAAU;AAC9B,aAAK6C,eAAL,CAAqB7C,IAArB;AACD,KAFD;;AAIA,SAAK3D,EAAL,CAAQ,aAAR,EAAuB,UAAC2B,MAAD,EAAY;AACjC,aAAKtC,UAAL,CAAgBsC,MAAhB;AACD,KAFD;;AAIA,SAAK3B,EAAL,CAAQ,gBAAR,EAA0B,UAAC2B,MAAD,EAAS7B,MAAT,EAAoB;AAC5C,aAAKd,YAAL,CAAkB2C,MAAlB,EAA0B;AACxBW,kBAAU,SAAc,EAAd,EAAkB,OAAKzD,QAAL,GAAgBb,KAAhB,CAAsB2D,MAAtB,EAA8BW,QAAhD,EAA0D;AAClEN,yBAAe8F,KAAKC,GAAL,EADmD;AAElEhG,0BAAgB,KAFkD;AAGlEF,sBAAY,CAHsD;AAIlEC,yBAAe;AAJmD,SAA1D;AADc,OAA1B;AAQD,KATD;;AAWA;AACA;AACA;AACA;AACA,QAAMkG,8BAA8BzL,SAAS,KAAKgD,kBAAd,EAAkC,GAAlC,EAAuC,EAAE0I,SAAS,IAAX,EAAiBC,UAAU,KAA3B,EAAvC,CAApC;;AAEA,SAAKlI,EAAL,CAAQ,iBAAR,EAA2BgI,2BAA3B;;AAEA,SAAKhI,EAAL,CAAQ,gBAAR,EAA0B,UAAC2B,MAAD,EAASwG,UAAT,EAAqBC,SAArB,EAAmC;AAC3D,aAAKpJ,YAAL,CAAkB2C,MAAlB,EAA0B;AACxBW,kBAAU,SAAc,EAAd,EAAkB,OAAKzD,QAAL,GAAgBb,KAAhB,CAAsB2D,MAAtB,EAA8BW,QAAhD,EAA0D;AAClEP,0BAAgB,IADkD;AAElEF,sBAAY;AAFsD,SAA1D,CADc;AAKxBuG,mBAAWA,SALa;AAMxBpB,kBAAU;AANc,OAA1B;;AASA,aAAKZ,uBAAL;AACD,KAXD;;AAaA,SAAKpG,EAAL,CAAQ,qBAAR,EAA+B,UAAC2B,MAAD,EAASW,QAAT,EAAsB;AACnD,aAAKtD,YAAL,CAAkB2C,MAAlB,EAA0B;AACxBW,kBAAU,SAAc,EAAd,EAAkB,OAAKzD,QAAL,GAAgBb,KAAhB,CAAsB2D,MAAtB,EAA8BW,QAAhD,EAA0D;AAClE+F,sBAAY/F;AADsD,SAA1D;AADc,OAA1B;AAKD,KAND;;AAQA,SAAKtC,EAAL,CAAQ,qBAAR,EAA+B,UAAC2B,MAAD,EAAY;AACzC,UAAM3D,QAAQ,SAAc,EAAd,EAAkB,OAAKa,QAAL,GAAgBb,KAAlC,CAAd;AACAA,YAAM2D,MAAN,IAAgB,SAAc,EAAd,EAAkB3D,MAAM2D,MAAN,CAAlB,EAAiC;AAC/CW,kBAAU,SAAc,EAAd,EAAkBtE,MAAM2D,MAAN,EAAcW,QAAhC;AADqC,OAAjC,CAAhB;AAGA,aAAOtE,MAAM2D,MAAN,EAAcW,QAAd,CAAuB+F,UAA9B;;AAEA,aAAK9H,QAAL,CAAc,EAAEvC,OAAOA,KAAT,EAAd;AACD,KARD;;AAUA,SAAKgC,EAAL,CAAQ,sBAAR,EAAgC,UAAC2B,MAAD,EAASW,QAAT,EAAsB;AACpD,aAAKtD,YAAL,CAAkB2C,MAAlB,EAA0B;AACxBW,kBAAU,SAAc,EAAd,EAAkB,OAAKzD,QAAL,GAAgBb,KAAhB,CAAsB2D,MAAtB,EAA8BW,QAAhD,EAA0D;AAClEgG,uBAAahG;AADqD,SAA1D;AADc,OAA1B;AAKD,KAND;;AAQA,SAAKtC,EAAL,CAAQ,sBAAR,EAAgC,UAAC2B,MAAD,EAAY;AAC1C,UAAM3D,QAAQ,SAAc,EAAd,EAAkB,OAAKa,QAAL,GAAgBb,KAAlC,CAAd;AACAA,YAAM2D,MAAN,IAAgB,SAAc,EAAd,EAAkB3D,MAAM2D,MAAN,CAAlB,EAAiC;AAC/CW,kBAAU,SAAc,EAAd,EAAkBtE,MAAM2D,MAAN,EAAcW,QAAhC;AADqC,OAAjC,CAAhB;AAGA,aAAOtE,MAAM2D,MAAN,EAAcW,QAAd,CAAuBgG,WAA9B;AACA;AACA;AACA;;AAEA,aAAK/H,QAAL,CAAc,EAAEvC,OAAOA,KAAT,EAAd;AACD,KAXD;;AAaA,SAAKgC,EAAL,CAAQ,UAAR,EAAoB,YAAM;AACxB;AACA,aAAKoG,uBAAL;AACD,KAHD;;AAKA;AACA,QAAI,OAAOmC,MAAP,KAAkB,WAAtB,EAAmC;AACjCA,aAAOC,gBAAP,CAAwB,QAAxB,EAAkC;AAAA,eAAM,OAAKC,kBAAL,EAAN;AAAA,OAAlC;AACAF,aAAOC,gBAAP,CAAwB,SAAxB,EAAmC;AAAA,eAAM,OAAKC,kBAAL,EAAN;AAAA,OAAnC;AACAjD,iBAAW;AAAA,eAAM,OAAKiD,kBAAL,EAAN;AAAA,OAAX,EAA4C,IAA5C;AACD;AACF,G;;iBAEDA,kB,iCAAsB;AACpB,QAAMC,SACJ,OAAOH,OAAOI,SAAP,CAAiBC,MAAxB,KAAmC,WAAnC,GACIL,OAAOI,SAAP,CAAiBC,MADrB,GAEI,IAHN;AAIA,QAAI,CAACF,MAAL,EAAa;AACX,WAAKvI,IAAL,CAAU,YAAV;AACA,WAAKjB,IAAL,CAAU,wBAAV,EAAoC,OAApC,EAA6C,CAA7C;AACA,WAAK2J,UAAL,GAAkB,IAAlB;AACD,KAJD,MAIO;AACL,WAAK1I,IAAL,CAAU,WAAV;AACA,UAAI,KAAK0I,UAAT,EAAqB;AACnB,aAAK1I,IAAL,CAAU,aAAV;AACA,aAAKjB,IAAL,CAAU,YAAV,EAAwB,SAAxB,EAAmC,IAAnC;AACA,aAAK2J,UAAL,GAAkB,KAAlB;AACD;AACF;AACF,G;;iBAEDC,K,oBAAS;AACP,WAAO,KAAKlM,IAAL,CAAUS,EAAjB;AACD,G;;AAED;;;;;;;;;iBAOA0L,G,gBAAKC,M,EAAQpM,I,EAAM;AACjB,QAAI,OAAOoM,MAAP,KAAkB,UAAtB,EAAkC;AAChC,UAAIC,MAAM,uCAAoCD,WAAW,IAAX,GAAkB,MAAlB,UAAkCA,MAAlC,yCAAkCA,MAAlC,CAApC,UACR,oEADF;AAEA,YAAM,IAAIE,SAAJ,CAAcD,GAAd,CAAN;AACD;;AAED;AACA,QAAMxH,SAAS,IAAIuH,MAAJ,CAAW,IAAX,EAAiBpM,IAAjB,CAAf;AACA,QAAMuM,WAAW1H,OAAOpE,EAAxB;AACA,SAAKuB,OAAL,CAAa6C,OAAOZ,IAApB,IAA4B,KAAKjC,OAAL,CAAa6C,OAAOZ,IAApB,KAA6B,EAAzD;;AAEA,QAAI,CAACsI,QAAL,EAAe;AACb,YAAM,IAAI7E,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,QAAI,CAAC7C,OAAOZ,IAAZ,EAAkB;AAChB,YAAM,IAAIyD,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,QAAI8E,sBAAsB,KAAKtK,SAAL,CAAeqK,QAAf,CAA1B;AACA,QAAIC,mBAAJ,EAAyB;AACvB,UAAIH,2CAAuCG,oBAAoB/L,EAA3D,qCACe8L,QADf,oNAAJ;AAMA,YAAM,IAAI7E,KAAJ,CAAU2E,IAAV,CAAN;AACD;;AAED,SAAKrK,OAAL,CAAa6C,OAAOZ,IAApB,EAA0B4B,IAA1B,CAA+BhB,MAA/B;AACAA,WAAO4H,OAAP;;AAEA,WAAO,IAAP;AACD,G;;AAED;;;;;;;iBAKAvK,S,sBAAW4F,I,EAAM;AACf,QAAI4E,cAAc,KAAlB;AACA,SAAK9H,cAAL,CAAoB,UAACC,MAAD,EAAY;AAC9B,UAAM8H,aAAa9H,OAAOpE,EAA1B;AACA,UAAIkM,eAAe7E,IAAnB,EAAyB;AACvB4E,sBAAc7H,MAAd;AACA,eAAO,KAAP;AACD;AACF,KAND;AAOA,WAAO6H,WAAP;AACD,G;;AAED;;;;;;;iBAKA9H,c,2BAAgBgI,M,EAAQ;AAAA;;AACtBtH,WAAOC,IAAP,CAAY,KAAKvD,OAAjB,EAA0BwD,OAA1B,CAAkC,sBAAc;AAC9C,aAAKxD,OAAL,CAAa6K,UAAb,EAAyBrH,OAAzB,CAAiCoH,MAAjC;AACD,KAFD;AAGD,G;;AAED;;;;;;;iBAKAE,Y,yBAAcC,Q,EAAU;AACtB,QAAMC,OAAO,KAAKhL,OAAL,CAAa+K,SAAS9I,IAAtB,CAAb;;AAEA,QAAI8I,SAASE,SAAb,EAAwB;AACtBF,eAASE,SAAT;AACD;;AAED,QAAMC,QAAQF,KAAKhH,OAAL,CAAa+G,QAAb,CAAd;AACA,QAAIG,UAAU,CAAC,CAAf,EAAkB;AAChBF,WAAK/G,MAAL,CAAYiH,KAAZ,EAAmB,CAAnB;AACD;AACF,G;;AAED;;;;;iBAGAC,K,oBAAS;AACP,SAAK1C,KAAL;;AAEA,SAAKtG,iBAAL;;AAEA,SAAKS,cAAL,CAAoB,UAACC,MAAD,EAAY;AAC9BA,aAAOoI,SAAP;AACD,KAFD;AAGD,G;;AAED;;;;;;;iBAOA3K,I,iBAAM4B,O,EAAyC;AAAA,QAAhCD,IAAgC,uEAAzB,MAAyB;AAAA,QAAjBmJ,QAAiB,uEAAN,IAAM;;AAC7C,QAAMC,mBAAmB,QAAOnJ,OAAP,yCAAOA,OAAP,OAAmB,QAA5C;;AAEA,SAAKP,QAAL,CAAc;AACZrB,YAAM;AACJ0B,kBAAU,KADN;AAEJC,cAAMA,IAFF;AAGJC,iBAASmJ,mBAAmBnJ,QAAQA,OAA3B,GAAqCA,OAH1C;AAIJ+G,iBAASoC,mBAAmBnJ,QAAQ+G,OAA3B,GAAqC;AAJ1C;AADM,KAAd;;AASA,SAAK1H,IAAL,CAAU,cAAV;;AAEAoI,WAAO2B,YAAP,CAAoB,KAAKC,aAAzB;AACA,QAAIH,aAAa,CAAjB,EAAoB;AAClB,WAAKG,aAAL,GAAqBC,SAArB;AACA;AACD;;AAED;AACA,SAAKD,aAAL,GAAqB3E,WAAW,KAAKrG,QAAhB,EAA0B6K,QAA1B,CAArB;AACD,G;;iBAED7K,Q,uBAAY;AACV,QAAMkL,UAAU,SAAc,EAAd,EAAkB,KAAKxL,QAAL,GAAgBK,IAAlC,EAAwC;AACtD0B,gBAAU;AAD4C,KAAxC,CAAhB;AAGA,SAAKL,QAAL,CAAc;AACZrB,YAAMmL;AADM,KAAd;AAGA,SAAKlK,IAAL,CAAU,aAAV;AACD,G;;AAED;;;;;;;;iBAMAlB,G,gBAAKgK,G,EAAKpI,I,EAAM;AACd,QAAI,CAAC,KAAKjE,IAAL,CAAUW,KAAf,EAAsB;AACpB;AACD;;AAED,QAAIuD,uBAAqB5E,MAAMoO,YAAN,EAArB,UAA8CrB,GAAlD;;AAEA5H,WAAOC,OAAP,GAAiBD,OAAOC,OAAP,GAAiB,IAAjB,GAAwB,aAAxB,GAAwC2H,GAAzD;;AAEA,QAAIpI,SAAS,OAAb,EAAsB;AACpB4E,cAAQC,KAAR,CAAc5E,OAAd;AACA;AACD;;AAED,QAAID,SAAS,SAAb,EAAwB;AACtB4E,cAAQqB,IAAR,CAAahG,OAAb;AACA;AACD;;AAED,QAAImI,aAAWA,GAAf,EAAsB;AACpBxD,cAAQxG,GAAR,CAAY6B,OAAZ;AACD,KAFD,MAEO;AACLA,6BAAqB5E,MAAMoO,YAAN,EAArB;AACA7E,cAAQxG,GAAR,CAAY6B,OAAZ;AACA2E,cAAQ8E,GAAR,CAAYtB,GAAZ;AACD;AACF,G;;AAED;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;iBAIAuB,G,kBAAO;AACL,SAAKvL,GAAL,CAAS,sCAAT;AACA,SAAK2I,OAAL;;AAEA,WAAO,IAAP;AACD,G;;AAED;;;;;iBAGA6C,O,oBAAS1E,Q,EAAU;AACjB,SAAK9G,GAAL,0CAAgD8G,QAAhD;;AAEA,QAAI,CAAC,KAAKlH,QAAL,GAAgB2B,cAAhB,CAA+BuF,QAA/B,CAAL,EAA+C;AAC7C,WAAK2E,aAAL,CAAmB3E,QAAnB;AACA,aAAO9H,QAAQoG,MAAR,CAAe,IAAIC,KAAJ,CAAU,oBAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAK8C,UAAL,CAAgBrB,QAAhB,CAAP;AACD,G;;AAED;;;;;;;;iBAMAoB,a,0BAAelB,O,EAAS;AAAA;;AACtB,QAAMF,WAAWzJ,MAAjB;;AAEA,SAAK6D,IAAL,CAAU,QAAV,EAAoB;AAClB9C,UAAI0I,QADc;AAElBE,eAASA;AAFS,KAApB;;AAKA,SAAK1F,QAAL,CAAc;AACZC,sBAAgB,SAAc,EAAd,EAAkB,KAAK3B,QAAL,GAAgB2B,cAAlC,6BACbuF,QADa,IACF;AACVE,iBAASA,OADC;AAEV0E,cAAM;AAFI,OADE;AADJ,KAAd;;AASA,WAAO5E,QAAP;AACD,G;;AAED;;;;;;;iBAKA2E,a,0BAAe3E,Q,EAAU;AACvB,QAAMvF,iBAAiB,SAAc,EAAd,EAAkB,KAAK3B,QAAL,GAAgB2B,cAAlC,CAAvB;AACA,WAAOA,eAAeuF,QAAf,CAAP;;AAEA,SAAKxF,QAAL,CAAc;AACZC,sBAAgBA;AADJ,KAAd;AAGD,G;;AAED;;;;;;;iBAKA4G,U,uBAAYrB,Q,EAAU;AAAA;;AACpB,QAAM6E,aAAa,KAAK/L,QAAL,GAAgB2B,cAAhB,CAA+BuF,QAA/B,CAAnB;AACA,QAAME,UAAU2E,WAAW3E,OAA3B;AACA,QAAM4E,cAAcD,WAAWD,IAA/B;;AAEA,QAAMG,kBACD,KAAK1K,aADJ,EAED,KAAKC,SAFJ,EAGD,KAAKC,cAHJ,CAAN;AAKA,QAAIyK,WAAW9M,QAAQC,OAAR,EAAf;AACA4M,UAAM1I,OAAN,CAAc,UAACI,EAAD,EAAKmI,IAAL,EAAc;AAC1B;AACA,UAAIA,OAAOE,WAAX,EAAwB;AACtB;AACD;;AAEDE,iBAAWA,SAAS7G,IAAT,CAAc,YAAM;AAAA;;AAAA,wBACF,OAAKrF,QAAL,EADE;AAAA,YACrB2B,cADqB,aACrBA,cADqB;;AAE7B,YAAMwK,gBAAgB,SAAc,EAAd,EAAkBxK,eAAeuF,QAAf,CAAlB,EAA4C;AAChE4E,gBAAMA;AAD0D,SAA5C,CAAtB;AAGA,eAAKpK,QAAL,CAAc;AACZC,0BAAgB,SAAc,EAAd,EAAkBA,cAAlB,6BACbuF,QADa,IACFiF,aADE;AADJ,SAAd;AAKA;AACA;AACA,eAAOxI,GAAGyD,OAAH,EAAYF,QAAZ,CAAP;AACD,OAbU,CAAX;AAcD,KApBD;;AAsBA;AACA;AACAgF,aAAS5G,KAAT,CAAe,UAACC,GAAD,EAAS;AACtB,aAAKjE,IAAL,CAAU,OAAV,EAAmBiE,GAAnB;;AAEA,aAAKsG,aAAL,CAAmB3E,QAAnB;AACD,KAJD;;AAMA,WAAOgF,SAAS7G,IAAT,CAAc,YAAM;AACzB,UAAMlG,QAAQiI,QAAQgF,GAAR,CAAY,UAACtJ,MAAD;AAAA,eAAY,OAAK2B,OAAL,CAAa3B,MAAb,CAAZ;AAAA,OAAZ,CAAd;AACA,UAAMuJ,aAAalN,MAAM6F,MAAN,CAAa,UAACF,IAAD;AAAA,eAAUA,QAAQ,CAACA,KAAK+B,KAAxB;AAAA,OAAb,CAAnB;AACA,UAAMyF,SAASnN,MAAM6F,MAAN,CAAa,UAACF,IAAD;AAAA,eAAUA,QAAQA,KAAK+B,KAAvB;AAAA,OAAb,CAAf;AACA,aAAKvF,IAAL,CAAU,UAAV,EAAsB,EAAE+K,sBAAF,EAAcC,cAAd,EAAtB;;AAEA;AACA,aAAKhL,IAAL,CAAU,SAAV,EAAqB8F,OAArB;;AAEA,aAAKyE,aAAL,CAAmB3E,QAAnB;;AAEA,aAAO,EAAEmF,sBAAF,EAAcC,cAAd,EAAP;AACD,KAZM,CAAP;AAaD,G;;AAEC;;;;;;;iBAKFrL,M,qBAAU;AAAA;;AACR,QAAI,CAAC,KAAKlB,OAAL,CAAawM,QAAlB,EAA4B;AAC1B,WAAKnM,GAAL,CAAS,mCAAT,EAA8C,SAA9C;AACD;;AAED,QAAMoM,4BAA4B,KAAK9H,sBAAL,EAAlC;AACA,QAAI,CAAC8H,yBAAL,EAAgC;AAC9B,aAAOpN,QAAQoG,MAAR,CAAe,IAAIC,KAAJ,CAAU,8CAAV,CAAf,CAAP;AACD;;AAED,QAAMgH,eAAerN,QAAQC,OAAR,GAClBgG,IADkB,CACb;AAAA,aAAM,OAAKtH,IAAL,CAAUuB,cAAV,CAAyB,OAAKU,QAAL,GAAgBb,KAAzC,CAAN;AAAA,KADa,CAArB;;AAGA,WAAOsN,aAAanH,KAAb,CAAmB,UAACC,GAAD,EAAS;AACjC,UAAMtD,UAAU,QAAOsD,GAAP,yCAAOA,GAAP,OAAe,QAAf,GAA0BA,IAAItD,OAA9B,GAAwCsD,GAAxD;AACA,aAAKlF,IAAL,CAAU4B,OAAV,EAAmB,OAAnB,EAA4B,IAA5B;AACA,aAAO7C,QAAQoG,MAAR,CAAe,IAAIC,KAAJ,sBAA6BxD,OAA7B,CAAf,CAAP;AACD,KAJM,EAIJoD,IAJI,CAIC,YAAM;AACZ,UAAMqH,iBAAiB,EAAvB;AACArJ,aAAOC,IAAP,CAAY,OAAKtD,QAAL,GAAgBb,KAA5B,EAAmCoE,OAAnC,CAA2C,UAACT,MAAD,EAAY;AACrD,YAAMgC,OAAO,OAAKL,OAAL,CAAa3B,MAAb,CAAb;;AAEA,YAAI,CAACgC,KAAKrB,QAAL,CAAcN,aAAf,IAAgC2B,KAAKoB,QAAzC,EAAmD;AACjDwG,yBAAe9I,IAAf,CAAoBkB,KAAKtG,EAAzB;AACD;AACF,OAND;;AAQA,UAAM0I,WAAW,OAAKoB,aAAL,CAAmBoE,cAAnB,CAAjB;AACA,aAAO,OAAKnE,UAAL,CAAgBrB,QAAhB,CAAP;AACD,KAhBM,CAAP;AAiBD,G;;;;wBAr8BY;AACX,aAAO,KAAKlH,QAAL,EAAP;AACD;;;;;;AAs8BH2M,OAAOC,OAAP,GAAiB,UAAU7O,IAAV,EAAgB;AAC/B,SAAO,IAAID,IAAJ,CAASC,IAAT,CAAP;AACD,CAFD;AAGA;AACA4O,OAAOC,OAAP,CAAe9O,IAAf,GAAsBA,IAAtB","file":"Core.js","sourcesContent":["const Utils = require('../core/Utils')\nconst Translator = require('../core/Translator')\nconst ee = require('namespace-emitter')\nconst cuid = require('cuid')\nconst throttle = require('lodash.throttle')\nconst prettyBytes = require('prettier-bytes')\nconst match = require('mime-match')\nconst DefaultStore = require('../store/DefaultStore')\n// const deepFreeze = require('deep-freeze-strict')\n\n/**\n * Main Uppy core\n *\n * @param {object} opts general options, like locales, to show modal or not to show\n */\nclass Uppy {\n  constructor (opts) {\n    const defaultLocale = {\n      strings: {\n        youCanOnlyUploadX: {\n          0: 'You can only upload %{smart_count} file',\n          1: 'You can only upload %{smart_count} files'\n        },\n        youHaveToAtLeastSelectX: {\n          0: 'You have to select at least %{smart_count} file',\n          1: 'You have to select at least %{smart_count} files'\n        },\n        exceedsSize: 'This file exceeds maximum allowed size of',\n        youCanOnlyUploadFileTypes: 'You can only upload:',\n        uppyServerError: 'Connection with Uppy Server failed'\n      }\n    }\n\n    // set default options\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: true,\n      debug: false,\n      restrictions: {\n        maxFileSize: false,\n        maxNumberOfFiles: false,\n        minNumberOfFiles: false,\n        allowedFileTypes: false\n      },\n      meta: {},\n      onBeforeFileAdded: (currentFile, files) => Promise.resolve(),\n      onBeforeUpload: (files, done) => Promise.resolve(),\n      locale: defaultLocale,\n      store: new DefaultStore(),\n      thumbnailGeneration: true\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    // i18n\n    this.translator = new Translator({locale: this.locale})\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    // Container for different types of plugins\n    this.plugins = {}\n\n    this.translator = new Translator({locale: this.opts.locale})\n    this.i18n = this.translator.translate.bind(this.translator)\n    this.getState = this.getState.bind(this)\n    this.getPlugin = this.getPlugin.bind(this)\n    this.setFileMeta = this.setFileMeta.bind(this)\n    this.setFileState = this.setFileState.bind(this)\n    // this._initSocket = this._initSocket.bind(this)\n    this.log = this.log.bind(this)\n    this.info = this.info.bind(this)\n    this.hideInfo = this.hideInfo.bind(this)\n    this.addFile = this.addFile.bind(this)\n    this.removeFile = this.removeFile.bind(this)\n    this.pauseResume = this.pauseResume.bind(this)\n    this._calculateProgress = this._calculateProgress.bind(this)\n    this.resetProgress = this.resetProgress.bind(this)\n\n    this.pauseAll = this.pauseAll.bind(this)\n    this.resumeAll = this.resumeAll.bind(this)\n    this.retryAll = this.retryAll.bind(this)\n    this.cancelAll = this.cancelAll.bind(this)\n    this.retryUpload = this.retryUpload.bind(this)\n    this.upload = this.upload.bind(this)\n\n    // this.bus = this.emitter = ee()\n    this.emitter = ee()\n    this.on = this.emitter.on.bind(this.emitter)\n    this.off = this.emitter.off.bind(this.emitter)\n    this.once = this.emitter.once.bind(this.emitter)\n    this.emit = this.emitter.emit.bind(this.emitter)\n\n    this.preProcessors = []\n    this.uploaders = []\n    this.postProcessors = []\n\n    this.store = this.opts.store\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      capabilities: {\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: Object.assign({}, this.opts.meta),\n      info: {\n        isHidden: true,\n        type: 'info',\n        message: ''\n      }\n    })\n\n    this._storeUnsubscribe = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch)\n      this.updateAll(nextState)\n    })\n\n    // for debugging and testing\n    // this.updateNum = 0\n    if (this.opts.debug) {\n      global.uppyLog = ''\n      global[this.opts.id] = this\n    }\n  }\n\n  /**\n   * Iterate on all plugins and run `update` on them. Called each time state changes\n   *\n   */\n  updateAll (state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state)\n    })\n  }\n\n  /**\n   * Updates state\n   *\n   * @param {patch} object\n   */\n  setState (patch) {\n    this.store.setState(patch)\n  }\n\n  /**\n   * Returns current state\n   */\n  getState () {\n    return this.store.getState()\n  }\n\n  // Back compat.\n  get state () {\n    return this.getState()\n  }\n\n  /**\n  * Shorthand to set state for a specific file\n  */\n  setFileState (fileID, state) {\n    this.setState({\n      files: Object.assign({}, this.getState().files, {\n        [fileID]: Object.assign({}, this.getState().files[fileID], state)\n      })\n    })\n  }\n\n  resetProgress () {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: false\n    }\n    const files = Object.assign({}, this.getState().files)\n    const updatedFiles = {}\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = Object.assign({}, files[fileID])\n      updatedFile.progress = Object.assign({}, updatedFile.progress, defaultProgress)\n      updatedFiles[fileID] = updatedFile\n    })\n\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0\n    })\n\n    // TODO Document on the website\n    this.emit('reset-progress')\n  }\n\n  addPreProcessor (fn) {\n    this.preProcessors.push(fn)\n  }\n\n  removePreProcessor (fn) {\n    const i = this.preProcessors.indexOf(fn)\n    if (i !== -1) {\n      this.preProcessors.splice(i, 1)\n    }\n  }\n\n  addPostProcessor (fn) {\n    this.postProcessors.push(fn)\n  }\n\n  removePostProcessor (fn) {\n    const i = this.postProcessors.indexOf(fn)\n    if (i !== -1) {\n      this.postProcessors.splice(i, 1)\n    }\n  }\n\n  addUploader (fn) {\n    this.uploaders.push(fn)\n  }\n\n  removeUploader (fn) {\n    const i = this.uploaders.indexOf(fn)\n    if (i !== -1) {\n      this.uploaders.splice(i, 1)\n    }\n  }\n\n  setMeta (data) {\n    const updatedMeta = Object.assign({}, this.getState().meta, data)\n    const updatedFiles = Object.assign({}, this.getState().files)\n\n    Object.keys(updatedFiles).forEach((fileID) => {\n      updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {\n        meta: Object.assign({}, updatedFiles[fileID].meta, data)\n      })\n    })\n\n    this.log('Adding metadata:')\n    this.log(data)\n\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles\n    })\n  }\n\n  setFileMeta (fileID, data) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that’s not with us anymore: ', fileID)\n      return\n    }\n    const newMeta = Object.assign({}, updatedFiles[fileID].meta, data)\n    updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {\n      meta: newMeta\n    })\n    this.setState({files: updatedFiles})\n  }\n\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n  getFile (fileID) {\n    return this.getState().files[fileID]\n  }\n\n  /**\n  * Check if minNumberOfFiles restriction is reached before uploading\n  *\n  * @return {boolean}\n  * @private\n  */\n  _checkMinNumberOfFiles () {\n    const {minNumberOfFiles} = this.opts.restrictions\n    if (Object.keys(this.getState().files).length < minNumberOfFiles) {\n      this.info(`${this.i18n('youHaveToAtLeastSelectX', {smart_count: minNumberOfFiles})}`, 'error', 5000)\n      return false\n    }\n    return true\n  }\n\n  /**\n  * Check if file passes a set of restrictions set in options: maxFileSize,\n  * maxNumberOfFiles and allowedFileTypes\n  *\n  * @param {object} file object to check\n  * @return {boolean}\n  * @private\n  */\n  _checkRestrictions (file) {\n    const {maxFileSize, maxNumberOfFiles, allowedFileTypes} = this.opts.restrictions\n\n    if (maxNumberOfFiles) {\n      if (Object.keys(this.getState().files).length + 1 > maxNumberOfFiles) {\n        this.info(`${this.i18n('youCanOnlyUploadX', {smart_count: maxNumberOfFiles})}`, 'error', 5000)\n        return false\n      }\n    }\n\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.filter((type) => {\n        if (!file.type) return false\n        return match(file.type, type)\n      }).length > 0\n\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ')\n        this.info(`${this.i18n('youCanOnlyUploadFileTypes')} ${allowedFileTypesString}`, 'error', 5000)\n        return false\n      }\n    }\n\n    if (maxFileSize) {\n      if (file.data.size > maxFileSize) {\n        this.info(`${this.i18n('exceedsSize')} ${prettyBytes(maxFileSize)}`, 'error', 5000)\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n  * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n  * try to guess file type in a clever way, check file against restrictions,\n  * and start an upload if `autoProceed === true`.\n  *\n  * @param {object} file object to add\n  */\n  addFile (file) {\n    // Wrap this in a Promise `.then()` handler so errors will reject the Promise\n    // instead of throwing.\n    const beforeFileAdded = Promise.resolve()\n      .then(() => this.opts.onBeforeFileAdded(file, this.getState().files))\n\n    return beforeFileAdded.catch((err) => {\n      const message = typeof err === 'object' ? err.message : err\n      this.info(message, 'error', 5000)\n      return Promise.reject(new Error(`onBeforeFileAdded: ${message}`))\n    }).then(() => {\n      return Utils.getFileType(file).then((fileType) => {\n        const updatedFiles = Object.assign({}, this.getState().files)\n        let fileName\n        if (file.name) {\n          fileName = file.name\n        } else if (fileType.split('/')[0] === 'image') {\n          fileName = fileType.split('/')[0] + '.' + fileType.split('/')[1]\n        } else {\n          fileName = 'noname'\n        }\n        const fileExtension = Utils.getFileNameAndExtension(fileName).extension\n        const isRemote = file.isRemote || false\n\n        const fileID = Utils.generateFileID(file)\n\n        const newFile = {\n          source: file.source || '',\n          id: fileID,\n          name: fileName,\n          extension: fileExtension || '',\n          meta: Object.assign({}, this.getState().meta, {\n            name: fileName,\n            type: fileType\n          }),\n          type: fileType,\n          data: file.data,\n          progress: {\n            percentage: 0,\n            bytesUploaded: 0,\n            bytesTotal: file.data.size || 0,\n            uploadComplete: false,\n            uploadStarted: false\n          },\n          size: file.data.size || 'N/A',\n          isRemote: isRemote,\n          remote: file.remote || '',\n          preview: file.preview\n        }\n\n        const isFileAllowed = this._checkRestrictions(newFile)\n        if (!isFileAllowed) return Promise.reject(new Error('File not allowed'))\n\n        updatedFiles[fileID] = newFile\n        this.setState({files: updatedFiles})\n\n        this.emit('file-added', newFile)\n        this.log(`Added file: ${fileName}, ${fileID}, mime type: ${fileType}`)\n\n        if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n          this.scheduledAutoProceed = setTimeout(() => {\n            this.scheduledAutoProceed = null\n            this.upload().catch((err) => {\n              console.error(err.stack || err.message || err)\n            })\n          }, 4)\n        }\n      })\n    })\n  }\n\n  removeFile (fileID) {\n    const { files, currentUploads } = this.state\n    const updatedFiles = Object.assign({}, files)\n    const removedFile = updatedFiles[fileID]\n    delete updatedFiles[fileID]\n\n    // Remove this file from its `currentUpload`.\n    const updatedUploads = Object.assign({}, currentUploads)\n    const removeUploads = []\n    Object.keys(updatedUploads).forEach((uploadID) => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter((uploadFileID) => uploadFileID !== fileID)\n      // Remove the upload if no files are associated with it anymore.\n      if (newFileIDs.length === 0) {\n        removeUploads.push(uploadID)\n        return\n      }\n\n      updatedUploads[uploadID] = Object.assign({}, currentUploads[uploadID], {\n        fileIDs: newFileIDs\n      })\n    })\n\n    this.setState({\n      currentUploads: updatedUploads,\n      files: updatedFiles\n    })\n\n    removeUploads.forEach((uploadID) => {\n      this.removeUpload(uploadID)\n    })\n\n    this._calculateTotalProgress()\n    this.emit('file-removed', fileID)\n\n    // Clean up object URLs.\n    if (removedFile.preview && Utils.isObjectURL(removedFile.preview)) {\n      URL.revokeObjectURL(removedFile.preview)\n    }\n\n    this.log(`Removed file: ${fileID}`)\n  }\n\n  /**\n   * Generate a preview image for the given file, if possible.\n   */\n  generatePreview (file) {\n    if (Utils.isPreviewSupported(file.type) && !file.isRemote) {\n      let previewPromise\n      if (this.opts.thumbnailGeneration === true) {\n        previewPromise = Utils.createThumbnail(file, 280)\n      } else {\n        previewPromise = Promise.resolve(URL.createObjectURL(file.data))\n      }\n      previewPromise.then((preview) => {\n        this.setPreviewURL(file.id, preview)\n      }).catch((err) => {\n        console.warn(err.stack || err.message)\n      })\n    }\n  }\n\n  /**\n   * Set the preview URL for a file.\n   */\n  setPreviewURL (fileID, preview) {\n    this.setFileState(fileID, { preview: preview })\n  }\n\n  pauseResume (fileID) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n\n    if (updatedFiles[fileID].uploadComplete) return\n\n    const wasPaused = updatedFiles[fileID].isPaused || false\n    const isPaused = !wasPaused\n\n    const updatedFile = Object.assign({}, updatedFiles[fileID], {\n      isPaused: isPaused\n    })\n\n    updatedFiles[fileID] = updatedFile\n    this.setState({files: updatedFiles})\n\n    this.emit('upload-pause', fileID, isPaused)\n\n    return isPaused\n  }\n\n  pauseAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete &&\n             updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: true\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({files: updatedFiles})\n\n    this.emit('pause-all')\n  }\n\n  resumeAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete &&\n             updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: false,\n        error: null\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({files: updatedFiles})\n\n    this.emit('resume-all')\n  }\n\n  retryAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error\n    })\n\n    filesToRetry.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: false,\n        error: null\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({\n      files: updatedFiles,\n      error: null\n    })\n\n    this.emit('retry-all', filesToRetry)\n\n    const uploadID = this._createUpload(filesToRetry)\n    return this._runUpload(uploadID)\n  }\n\n  cancelAll () {\n    this.emit('cancel-all')\n    this.setState({ files: {}, totalProgress: 0 })\n  }\n\n  retryUpload (fileID) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const updatedFile = Object.assign({}, updatedFiles[fileID],\n      { error: null, isPaused: false }\n    )\n    updatedFiles[fileID] = updatedFile\n    this.setState({\n      files: updatedFiles\n    })\n\n    this.emit('upload-retry', fileID)\n\n    const uploadID = this._createUpload([ fileID ])\n    return this._runUpload(uploadID)\n  }\n\n  reset () {\n    this.cancelAll()\n  }\n\n  _calculateProgress (data) {\n    const fileID = data.id\n\n    // skip progress event for a file that’s been removed\n    if (!this.getState().files[fileID]) {\n      this.log('Trying to set progress for a file that’s been removed: ', fileID)\n      return\n    }\n\n    this.setFileState(fileID, {\n      progress: Object.assign({}, this.getState().files[fileID].progress, {\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: Math.floor((data.bytesUploaded / data.bytesTotal * 100).toFixed(2))\n      })\n    })\n\n    this._calculateTotalProgress()\n  }\n\n  _calculateTotalProgress () {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = Object.assign({}, this.getState().files)\n\n    const inProgress = Object.keys(files).filter((file) => {\n      return files[file].progress.uploadStarted\n    })\n    const progressMax = inProgress.length * 100\n    let progressAll = 0\n    inProgress.forEach((file) => {\n      progressAll = progressAll + files[file].progress.percentage\n    })\n\n    const totalProgress = progressMax === 0 ? 0 : Math.floor((progressAll * 100 / progressMax).toFixed(2))\n\n    this.setState({\n      totalProgress: totalProgress\n    })\n  }\n\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-added`, `file-removed`, `upload-progress`\n   *\n   */\n  actions () {\n    // const log = this.log\n    // this.on('*', function (payload) {\n    //   log(`[Core] Event: ${this.event}`)\n    //   log(payload)\n    // })\n\n    // stress-test re-rendering\n    // setInterval(() => {\n    //   this.setState({bla: 'bla'})\n    // }, 20)\n\n    this.on('error', (error) => {\n      this.setState({ error: error.message })\n    })\n\n    this.on('upload-error', (fileID, error) => {\n      this.setFileState(fileID, { error: error.message })\n      this.setState({ error: error.message })\n\n      const fileName = this.getState().files[fileID].name\n      let message = `Failed to upload ${fileName}`\n      if (typeof error === 'object' && error.message) {\n        message = { message: message, details: error.message }\n      }\n      this.info(message, 'error', 5000)\n    })\n\n    this.on('upload', () => {\n      this.setState({ error: null })\n    })\n\n    // this.on('file-add', (data) => {\n    //   this.addFile(data)\n    // })\n\n    this.on('file-added', (file) => {\n      this.generatePreview(file)\n    })\n\n    this.on('file-remove', (fileID) => {\n      this.removeFile(fileID)\n    })\n\n    this.on('upload-started', (fileID, upload) => {\n      this.setFileState(fileID, {\n        progress: Object.assign({}, this.getState().files[fileID].progress, {\n          uploadStarted: Date.now(),\n          uploadComplete: false,\n          percentage: 0,\n          bytesUploaded: 0\n        })\n      })\n    })\n\n    // upload progress events can occur frequently, especially when you have a good\n    // connection to the remote server. Therefore, we are throtteling them to\n    // prevent accessive function calls.\n    // see also: https://github.com/tus/tus-js-client/commit/9940f27b2361fd7e10ba58b09b60d82422183bbb\n    const _throttledCalculateProgress = throttle(this._calculateProgress, 100, { leading: true, trailing: false })\n\n    this.on('upload-progress', _throttledCalculateProgress)\n\n    this.on('upload-success', (fileID, uploadResp, uploadURL) => {\n      this.setFileState(fileID, {\n        progress: Object.assign({}, this.getState().files[fileID].progress, {\n          uploadComplete: true,\n          percentage: 100\n        }),\n        uploadURL: uploadURL,\n        isPaused: false\n      })\n\n      this._calculateTotalProgress()\n    })\n\n    this.on('preprocess-progress', (fileID, progress) => {\n      this.setFileState(fileID, {\n        progress: Object.assign({}, this.getState().files[fileID].progress, {\n          preprocess: progress\n        })\n      })\n    })\n\n    this.on('preprocess-complete', (fileID) => {\n      const files = Object.assign({}, this.getState().files)\n      files[fileID] = Object.assign({}, files[fileID], {\n        progress: Object.assign({}, files[fileID].progress)\n      })\n      delete files[fileID].progress.preprocess\n\n      this.setState({ files: files })\n    })\n\n    this.on('postprocess-progress', (fileID, progress) => {\n      this.setFileState(fileID, {\n        progress: Object.assign({}, this.getState().files[fileID].progress, {\n          postprocess: progress\n        })\n      })\n    })\n\n    this.on('postprocess-complete', (fileID) => {\n      const files = Object.assign({}, this.getState().files)\n      files[fileID] = Object.assign({}, files[fileID], {\n        progress: Object.assign({}, files[fileID].progress)\n      })\n      delete files[fileID].progress.postprocess\n      // TODO should we set some kind of `fullyComplete` property on the file object\n      // so it's easier to see that the file is upload…fully complete…rather than\n      // what we have to do now (`uploadComplete && !postprocess`)\n\n      this.setState({ files: files })\n    })\n\n    this.on('restored', () => {\n      // Files may have changed--ensure progress is still accurate.\n      this._calculateTotalProgress()\n    })\n\n    // show informer if offline\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', () => this.updateOnlineStatus())\n      window.addEventListener('offline', () => this.updateOnlineStatus())\n      setTimeout(() => this.updateOnlineStatus(), 3000)\n    }\n  }\n\n  updateOnlineStatus () {\n    const online =\n      typeof window.navigator.onLine !== 'undefined'\n        ? window.navigator.onLine\n        : true\n    if (!online) {\n      this.emit('is-offline')\n      this.info('No internet connection', 'error', 0)\n      this.wasOffline = true\n    } else {\n      this.emit('is-online')\n      if (this.wasOffline) {\n        this.emit('back-online')\n        this.info('Connected!', 'success', 3000)\n        this.wasOffline = false\n      }\n    }\n  }\n\n  getID () {\n    return this.opts.id\n  }\n\n  /**\n   * Registers a plugin with Core\n   *\n   * @param {Class} Plugin object\n   * @param {Object} options object that will be passed to Plugin later\n   * @return {Object} self for chaining\n   */\n  use (Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      let msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` +\n        ' Please verify that the plugin was imported and spelled correctly.'\n      throw new TypeError(msg)\n    }\n\n    // Instantiate\n    const plugin = new Plugin(this, opts)\n    const pluginId = plugin.id\n    this.plugins[plugin.type] = this.plugins[plugin.type] || []\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id')\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type')\n    }\n\n    let existsPluginAlready = this.getPlugin(pluginId)\n    if (existsPluginAlready) {\n      let msg = `Already found a plugin named '${existsPluginAlready.id}'.\n        Tried to use: '${pluginId}'.\n        Uppy is currently limited to running one of every plugin.\n        Share your use case with us over at\n        https://github.com/transloadit/uppy/issues/\n        if you want us to reconsider.`\n      throw new Error(msg)\n    }\n\n    this.plugins[plugin.type].push(plugin)\n    plugin.install()\n\n    return this\n  }\n\n  /**\n   * Find one Plugin by name\n   *\n   * @param string name description\n   */\n  getPlugin (name) {\n    let foundPlugin = false\n    this.iteratePlugins((plugin) => {\n      const pluginName = plugin.id\n      if (pluginName === name) {\n        foundPlugin = plugin\n        return false\n      }\n    })\n    return foundPlugin\n  }\n\n  /**\n   * Iterate through all `use`d plugins\n   *\n   * @param function method description\n   */\n  iteratePlugins (method) {\n    Object.keys(this.plugins).forEach(pluginType => {\n      this.plugins[pluginType].forEach(method)\n    })\n  }\n\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {Plugin} instance The plugin instance to remove.\n   */\n  removePlugin (instance) {\n    const list = this.plugins[instance.type]\n\n    if (instance.uninstall) {\n      instance.uninstall()\n    }\n\n    const index = list.indexOf(instance)\n    if (index !== -1) {\n      list.splice(index, 1)\n    }\n  }\n\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n  close () {\n    this.reset()\n\n    this._storeUnsubscribe()\n\n    this.iteratePlugins((plugin) => {\n      plugin.uninstall()\n    })\n  }\n\n  /**\n  * Set info message in `state.info`, so that UI plugins like `Informer`\n  * can display the message\n  *\n  * @param {string} msg Message to be displayed by the informer\n  */\n\n  info (message, type = 'info', duration = 3000) {\n    const isComplexMessage = typeof message === 'object'\n\n    this.setState({\n      info: {\n        isHidden: false,\n        type: type,\n        message: isComplexMessage ? message.message : message,\n        details: isComplexMessage ? message.details : null\n      }\n    })\n\n    this.emit('info-visible')\n\n    window.clearTimeout(this.infoTimeoutID)\n    if (duration === 0) {\n      this.infoTimeoutID = undefined\n      return\n    }\n\n    // hide the informer after `duration` milliseconds\n    this.infoTimeoutID = setTimeout(this.hideInfo, duration)\n  }\n\n  hideInfo () {\n    const newInfo = Object.assign({}, this.getState().info, {\n      isHidden: true\n    })\n    this.setState({\n      info: newInfo\n    })\n    this.emit('info-hidden')\n  }\n\n  /**\n   * Logs stuff to console, only if `debug` is set to true. Silent in production.\n   *\n   * @param {String|Object} msg to log\n   * @param {String} type optional `error` or `warning`\n   */\n  log (msg, type) {\n    if (!this.opts.debug) {\n      return\n    }\n\n    let message = `[Uppy] [${Utils.getTimeStamp()}] ${msg}`\n\n    global.uppyLog = global.uppyLog + '\\n' + 'DEBUG LOG: ' + msg\n\n    if (type === 'error') {\n      console.error(message)\n      return\n    }\n\n    if (type === 'warning') {\n      console.warn(message)\n      return\n    }\n\n    if (msg === `${msg}`) {\n      console.log(message)\n    } else {\n      message = `[Uppy] [${Utils.getTimeStamp()}]`\n      console.log(message)\n      console.dir(msg)\n    }\n  }\n\n  // _initSocket (opts) {\n  //   if (!this.socket) {\n  //     this.socket = new UppySocket(opts)\n  //   }\n\n  //   return this.socket\n  // }\n\n  /**\n   * Initializes actions, installs all plugins (by iterating on them and calling `install`), sets options\n   *\n   */\n  run () {\n    this.log('Core is run, initializing actions...')\n    this.actions()\n\n    return this\n  }\n\n  /**\n   * Restore an upload by its ID.\n   */\n  restore (uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\n\n    if (!this.getState().currentUploads[uploadID]) {\n      this._removeUpload(uploadID)\n      return Promise.reject(new Error('Nonexistent upload'))\n    }\n\n    return this._runUpload(uploadID)\n  }\n\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @return {string} ID of this upload.\n   */\n  _createUpload (fileIDs) {\n    const uploadID = cuid()\n\n    this.emit('upload', {\n      id: uploadID,\n      fileIDs: fileIDs\n    })\n\n    this.setState({\n      currentUploads: Object.assign({}, this.getState().currentUploads, {\n        [uploadID]: {\n          fileIDs: fileIDs,\n          step: 0\n        }\n      })\n    })\n\n    return uploadID\n  }\n\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n  _removeUpload (uploadID) {\n    const currentUploads = Object.assign({}, this.getState().currentUploads)\n    delete currentUploads[uploadID]\n\n    this.setState({\n      currentUploads: currentUploads\n    })\n  }\n\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   *\n   * @private\n   */\n  _runUpload (uploadID) {\n    const uploadData = this.getState().currentUploads[uploadID]\n    const fileIDs = uploadData.fileIDs\n    const restoreStep = uploadData.step\n\n    const steps = [\n      ...this.preProcessors,\n      ...this.uploaders,\n      ...this.postProcessors\n    ]\n    let lastStep = Promise.resolve()\n    steps.forEach((fn, step) => {\n      // Skip this step if we are restoring and have already completed this step before.\n      if (step < restoreStep) {\n        return\n      }\n\n      lastStep = lastStep.then(() => {\n        const { currentUploads } = this.getState()\n        const currentUpload = Object.assign({}, currentUploads[uploadID], {\n          step: step\n        })\n        this.setState({\n          currentUploads: Object.assign({}, currentUploads, {\n            [uploadID]: currentUpload\n          })\n        })\n        // TODO give this the `currentUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n        return fn(fileIDs, uploadID)\n      })\n    })\n\n    // Not returning the `catch`ed promise, because we still want to return a rejected\n    // promise from this method if the upload failed.\n    lastStep.catch((err) => {\n      this.emit('error', err)\n\n      this._removeUpload(uploadID)\n    })\n\n    return lastStep.then(() => {\n      const files = fileIDs.map((fileID) => this.getFile(fileID))\n      const successful = files.filter((file) => file && !file.error)\n      const failed = files.filter((file) => file && file.error)\n      this.emit('complete', { successful, failed })\n\n      // Compatibility with pre-0.21\n      this.emit('success', fileIDs)\n\n      this._removeUpload(uploadID)\n\n      return { successful, failed }\n    })\n  }\n\n    /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @return {Promise}\n   */\n  upload () {\n    if (!this.plugins.uploader) {\n      this.log('No uploader type plugins are used', 'warning')\n    }\n\n    const isMinNumberOfFilesReached = this._checkMinNumberOfFiles()\n    if (!isMinNumberOfFilesReached) {\n      return Promise.reject(new Error('Minimum number of files has not been reached'))\n    }\n\n    const beforeUpload = Promise.resolve()\n      .then(() => this.opts.onBeforeUpload(this.getState().files))\n\n    return beforeUpload.catch((err) => {\n      const message = typeof err === 'object' ? err.message : err\n      this.info(message, 'error', 5000)\n      return Promise.reject(new Error(`onBeforeUpload: ${message}`))\n    }).then(() => {\n      const waitingFileIDs = []\n      Object.keys(this.getState().files).forEach((fileID) => {\n        const file = this.getFile(fileID)\n\n        if (!file.progress.uploadStarted || file.isRemote) {\n          waitingFileIDs.push(file.id)\n        }\n      })\n\n      const uploadID = this._createUpload(waitingFileIDs)\n      return this._runUpload(uploadID)\n    })\n  }\n}\n\nmodule.exports = function (opts) {\n  return new Uppy(opts)\n}\n// Expose class constructor.\nmodule.exports.Uppy = Uppy\n"]}